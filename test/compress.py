import os

# Util script mean to be used as a generator
# of binary numbers. It should reduce the
# friction of creating binary files with numbers
# within them.

SOURCE = 'data/numbers.data'
RESULTS_FILE = 'data/results.data'

RUN_CMD = 'cargo run'
CLEANUP_CMD = f'rm {SOURCE} && rm {RESULTS_FILE}'

# Numbers which hold 32 bits (4 bytes).
# Also we're using big-endian.

NUMBERS = [
    0x00, 0xFF, 0xFF, 0x23,  # 35
    0x00, 0x00, 0x00, 0x01,  # 1
    0x00, 0x00, 0x00, 0xF0,  # 240
    0x00, 0x00, 0x00, 0x03,  # 3

    0x00, 0x00, 0x00, 0x22,  # 34
    0x00, 0x00, 0x00, 0x00,  # 0
    0x00, 0x00, 0x00, 0xEF,  # 239
    0x00, 0x00, 0x00, 0x02,  # 2

    # Should need 2 bytes for each token
    0x00, 0x00, 0x00, 0x23,  # 35
    0x00, 0x00, 0x00, 0x01,  # 1
    0x00, 0x00, 0xFF, 0xFF,  # 240
    0x00, 0x00, 0x00, 0x03,  # 3

    # Should need 1 bytes for each token
    0xF0, 0x00, 0x00, 0x23,
    0xF0, 0x00, 0x00, 0x22,
    0xF0, 0x00, 0x00, 0x21,
    0xF0, 0x00, 0x00, 0x20,

    # Should need 4 bytes for each token
    0xF0, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x03,
]

def build_source():
    with open(SOURCE, 'wb') as f:
        f.write(bytes(NUMBERS))


def main():
    build_source()

    if os.system(RUN_CMD):
        print('Failed to compile binary!')
        return

    with open(RESULTS_FILE, 'rb') as f:
        results = f.read()

    # We expect
    # - a reference: 0x00 0x00 0x00 0x01
    # - block size (bytes): 0x01
    # - reduced blocks: 0x22 0x00 0xE9 0x02

    print(results == bytes([
        0x04, # compressed numbers per chunk

        0x00, 0x00, 0x00, 0x01,
        0x03,
        0xFF, 0xFF, 0x22,
        0x00, 0x00, 0x00,
        0x00, 0x00, 0xEF,
        0x00, 0x00, 0x02,

        0x00, 0x00, 0x00, 0x00,
        0x01,
        0x22, 0x00, 0xEF, 0x02,

        0x00, 0x00, 0x00, 0x01,
        0x02,
        0x00, 0x22,
        0x00, 0x00,
        0xFF, 0xFE,
        0x00, 0x02,

        0xF0, 0x00, 0x00, 0x20,
        0x01,
        0x03, 0x02, 0x01, 0x00,

        0x00, 0x00, 0x00, 0x01,
        0x04,
        0xF0, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x02,
    ]))

    os.system(CLEANUP_CMD)


if __name__ == '__main__':
    main()
